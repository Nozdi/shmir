"""
.. module:: score
    :synopsis: This module provides scoring structure of frames generated by mfold
"""

from math import ceil

from shmir.data.ss import (
    parse_ss,
    parse_score
)


def score_structure(frame, folding_file, original_frame):
    """Scorring function.

    Args:
        frame: Backbone object with added siRNAs
        folding_file: file from mfold
        ss_file: object Backbone from database (not changed)

    Returns:
        score(int): score given for structure of frame.
    """

    structure_ss = parse_ss(folding_file)
    max_score, orginal_score = parse_score(original_frame.structure)

    # differences
    flanks5 = len(original_frame.flanks5_s) - len(frame.flanks5_s)
    insertion1 = len(original_frame.miRNA_s) - len(frame.siRNA1)
    loop = len(original_frame.loop_s) - len(frame.loop_s)
    insertion2 = len(original_frame.miRNA_a) - len(frame.siRNA2)
    flanks3 = len(original_frame.flanks3_s) - len(frame.flanks3_s)

    position = len(frame.flanks5_s)  # position in sequence (list)
    structure_len = len(frame.template())
    current = position + flanks5  # current position (after changes)

    if flanks5 < 0:
        add_shifts(0, structure_len, structure_ss, flanks5, 0)
    else:
        add_shifts(position, structure_len,
                   structure_ss, flanks5, current)
    for diff, nucleotides in [(insertion1, frame.siRNA1), (loop, frame.loop_s),
                              (insertion2, frame.siRNA2), (flanks3, '')]:
        position += len(nucleotides)
        current = position + diff
        add_shifts(position, structure_len, structure_ss, diff, current)
    score = 0
    for created in structure_ss:
        for orginal, points in orginal_score:
            if created == orginal:
                score += points
    return int(ceil(score/max_score * 100))


def add_shifts(start, end, fold_ss, value, current):
    """The numbers assigned to the nucleotides have to be verified,
    because flanking sequences can be shortened or extended during insertion.
    Moreover, the length of the siRNA insert can differ from the natural one.
    It dynamicly changes fold_ss

    Args:
        start(int): starting number.
        end(int): ending number.
        value: value to add.
        current: current frame number
    """
    for num in range(end):
        if num >= start:
            fold_ss[num][0] += value
        if fold_ss[num][1] != 0 and fold_ss[num][1] > current:
            fold_ss[num][1] += value
